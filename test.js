function rightMostBits(d,e){return d%Math.pow(2,e)|0}function fromBin(d){for(var e=0,g=1,h=d.length-1;0<=h;h--)e+=g*d[h],g*=2;return e}function toBin(d){for(arr=[];0<d;)arr.push(d%2),d=d/2|0;arr.reverse();return arr}function esc(d){"\\"==d&&(d="\\\\");d==chr(0)&&(d="\\"+chr(0));return d}function chr(d){return String.fromCharCode(d)}function range(d){var e=-1,g=-1;for(i in d)if(code=d.charCodeAt(i),32!=code){if(code<e||-1==e)e=code;if(code>g||-1==g)g=code}return[g,e]}
function makeLengthByPrependingZeros(d,e){for(;d.length<e;)d.splice(0,0,0);return d}function makeLengthByAppendingZeros(d,e){for(;d.length<e;)d.push(0);return d}function getNumberOfBits(d){if(0>d)console.log("getNumberOfBits(num, amount) doesn't work with neg num");else{for(bits=0;0<d;)d=d/2|0,bits++;return bits}}function NumberOfBits(d){return getNumberOfBits(d)}
function leftMostBits(d,e,g){if(0==d)return 0;if(0>d)console.log("leftMostBits(num, amount) doesn't work with neg num");else return length=g||getNumberOfBits(d),0>length-e?d:d/Math.pow(2,length-e)|0}function getBit(d,e){return d%Math.pow(2,e)/Math.pow(2,e-1)|0}
function longestChain(d,e){longest=[];if("string"===typeof d[e]){for(;e<d.length&&"string"===typeof d[e];)longest.push(d[e]),e++;return longest}for(n in d[e]){current=number=d[e][n];arr=[];for(var g=e;g<d.length;g++)if(d[g]instanceof Array&&-1!=d[g].indexOf(current))arr.push(current),current+=1;else break;arr.length>longest.length&&(longest=arr)}return longest}
function getB4Locations(d){locations={};for(i in d)b4_word=d[i],void 0!=locations[b4_word]?locations[b4_word].push(parseInt(i)):locations[b4_word]=[parseInt(i)];return locations}function getBits(d,e,g){loc=e/8|0;e%=8;for(a=[];0<g;){var h=Math.min(g,8-e);if(loc>=d.length)return-1;right=rightMostBits(d.charCodeAt(loc),8-e);left=leftMostBits(right,h,8-e);n=makeLengthByPrependingZeros(toBin(left),h);for(i in n)a.push(n[i]);g-=h;e=0;loc++}return a}
function BitArray(d){this.uint8=new Uint8Array(d);this.size=0}BitArray.prototype.add=function(d,e,g){if("number"==typeof d)for(arr=makeLengthByAppendingZeros(toBin(d),1),e?d=g?leftMostBits(d,e):rightMostBits(d,e):e=arr.length,i=0;i<e;i++)console.log(arr[i]),this.uint8[this.size/8|0]+=arr[i]*Math.pow(2,7-this.size%8),this.size++;if("string"==typeof d)for(i=0;i<d.length;i++)this.add(d.charCodeAt(i))};
BitArray.prototype.get=function(d,e){e|=this.size;arr=[];for(i=d|0;i<e;i++)arr.push(getBit(this.uint8[i/8|0],8-i%8));return arr};BitArray.prototype.toString=function(){str="";for(i=0;i<this.size/8|0;i++)str+=chr(this.uint8[i]);0!=this.size%8&&(last=this.uint8[this.size/8|1],last=fromBin(makeLengthByAppendingZeros(toBin(last),8)),str+=chr(last));return str};BitArray.prototype.toArr=BitArray.prototype.get;
function condense(d,e){converted=[];for(i in d)after_word=d[i],void 0!=e[after_word]?converted.push(e[after_word]):converted.push(after_word);return converted}function expand(d,e){result="";for(i in d)c=d[i],result=c instanceof Array?result+(e[c[0]]+" "):result+(c+" ");return result.substring(0,result.length-1)}
function pack1(d){start=0;for(super_condensed=[];start<d.length;){longest=longestChain(d,start);if(0==longest.length){console.log("longest is 0, that's a problem");break}start+=longest.length;"string"===typeof longest[0]?super_condensed.push(longest.join(" ")):super_condensed.push([longest[0],longest[longest.length-1]])}return super_condensed}
function unpack1(d){unpacked=[];for(i in d)if(p=d[i],p instanceof Array)for(var e=p[0];e<=p[1];e++)unpacked.push([e]);else for(word in words=p.split(" "),words)unpacked.push(words[word]);return unpacked}
function pack2(d){packed="";for(i in d)if(p=d[i],p instanceof Array)for(n in p){start=p[n];num=128;bitsLeft=7;for(chrs="";getNumberOfBits(start)>=bitsLeft;)num+=rightMostBits(start,bitsLeft),start=start/Math.pow(2,bitsLeft)|0,bitsLeft=8,chrs+=esc(chr(num)),num=0;num+=start;0!=num&&(chrs+=esc(chr(num)));packed+=chrs+chr(0)}else{packed+=chr(127);for(part in p)packed+=esc(p[part]);packed+=chr(0)}return packed}
function unpack2(d){g=0;l=[];for(nums=[];g<d.length;){c=d[g];if(c==chr(0)){indicator=nums[0]/128;nums[0]%=128;if(indicator|0){multiplier=1;num=0;for(n in nums)num+=nums[n]*multiplier,multiplier=1==multiplier?128:256*multiplier;l.push(num)}else{str="";for(var e=1;e<nums.length;e++)num=nums[e],str+=chr(num);l.push(str)}nums=[]}else{if("\\"==c){g+=1;if(g>=d.length){console.log("Error, string ends in escape \\");break}c=d[g]}num=c.charCodeAt(0);nums.push(num)}g++}fin=[];for(var g=0;g<l.length;g++)"string"===
typeof l[g]?fin.push(l[g]):(fin.push([l[g],l[g+1]]),g++);return fin}
function zipString(d){var e=[],g=range(d),e=g[1]-1,h=1+g[0]-g[1],k=NumberOfBits(h),g="",k=[];if(64>h)for(i in g+=chr(128+h),g+=chr(e),d)code=d.charCodeAt(i),code=32==code?0:code-e,k.push(code);console.log("-----------------------------------------------------");frequencies={};for(c in k)code=k[c],void 0==frequencies[code]?frequencies[code]=1:frequencies[code]++;tree=[];for(f in frequencies)tree.push([parseInt(frequencies[f]),parseInt(f)]);for(;1<tree.length;)tree.sort(function(d,e){return e[0]-d[0]}),
bottom=tree.splice(tree.length-2),n=[bottom[0][0]+bottom[1][0],[]],n[1].push(bottom[0]),n[1].push(bottom[1]),tree.push(n);tree=tree[0];e=[];d=0;for(m=tree;0<m[1].length&&"object"==typeof m[1][0];)m=m[1][0],d++;k=[];e=[];for(e=0;e<d;e++)k.push(0);getNode=function(d,e){m=d;for(p in e)m=m[1][e[p]];return m};recorder=function(d,e,g){node=getNode(d,e);"number"!=typeof node[1]&&(g.add(0),e=e.slice(),e.push(0),test=JSON.stringify(e),recorder(d,e,g),e[e.length-1]=1,g.add(1),g.add(0),recorder(d,e,g),g.add(1))};
e=new BitArray(1E3);recorder(tree,[],e);e=e.toArr();console.log(e);d="l";var h=0,m=[],k=[];for(b in e)bit=e[b],0==bit?(m.push("l"==d?0:1),d="l"):(0==h&&k.push(m.slice()),m.pop(),d="r"),h=bit;console.log(JSON.stringify(k));console.log("---------------------------------------------");return g}
function unzipString(d){var e;1==leftMostBits(d.charCodeAt(0),1)&&(e=NumberOfBits(rightMostBits(d.charCodeAt(0),7)));console.log(e);for(var g=d.charCodeAt(1),h,k=16,m="",q=1==getBits(d,k,1)[0],k=k+1;q&&-1!=(h=getBits(d,k,e));)console.log(h),console.log(chr(fromBin(h)+g)),m+=chr(fromBin(h)+g),k+=e,q=1==getBits(d,k,1)[0],k+=1;return m};
